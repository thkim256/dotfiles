#+TITLE: init-packages

* config
#+BEGIN_SRC emacs-lisp
;; 에러시 디버그모드
;; (setq debug-on-error t)

;; 인코딩 설정
(set-language-environment "Korean")
(set-terminal-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(prefer-coding-system 'utf-8)
(when (and window-system (eq system-type 'darwin))
	(set-selection-coding-system 'utf-8)
	(set-keyboard-coding-system 'utf-8)
	(setq locale-coding-system 'utf-8))

(when (eq system-type 'windows-nt)
	(global-set-key (kbd "<kana>") 'toggle-input-method))

(global-linum-mode t)
;; word-wrap
(global-visual-line-mode t)

(global-hl-line-mode t)
(global-font-lock-mode t)
(global-auto-revert-mode 1)

(setq system-time-locale "C")
(setq inhibit-startup-message t)
(setq initial-scratch-message nil)
(setq column-number-mode t)

;; tab -> space
(setq indent-tabs-mode t)
(setq tab-width 2)

(setq show-paren-display 0)

(setq ring-bell-function 'ignore)
;;(add-hook 'emacs-startup-hook 'toggle-frame-maximized)

(define-key global-map (kbd "C-M-f") 'toggle-frame-fullscreen)

;; dired
(put 'dired-find-alternate-file 'disabled nil)

(show-paren-mode t)

(when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

(defalias 'yes-or-no-p 'y-or-n-p)

;;; http://robots.thoughtbot.com/no-newline-at-end-of-file
(setq require-final-newline t)

;;; title bar
(setq frame-title-format "%b")

;;; compose-mail 바인딩 키 제거
(global-set-key (kbd "C-x m") nil)

;; 백업들 끄기
(setq backup-inhibited t)
(setq make-backup-files nil)
(setq auto-save-default nil)

;; No popup frame(새버퍼열때 현재 프레임에서 열기)
(setq ns-pop-up-frames nil)
(setq pop-up-frames nil)

(setq mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)

(setq echo-keystrokes 0.001) ;; 키입력시 에코창에 표시되는 딜레이 타임, 거이 없게 설정


;; https://www.emacswiki.org/emacs/SwitchingBuffers
(global-set-key (kbd "M-o")  'mode-line-other-buffer)


;;; emacs-lisp-mode
;; -------------------------------------------------------------------
(add-hook 'emacs-lisp-mode-hook
		(lambda ()
			(define-key emacs-lisp-mode-map "\C-c\C-c" 'eval-defun)))

;;; lisp-interaction-mode
;; -------------------------------------------------------------------
(add-hook 'lisp-interaction-mode-hook
		(lambda ()
			(define-key lisp-interaction-mode-map "\C-c\C-c" 'eval-defun)))

(when window-system
	(menu-bar-mode -1)
	(tool-bar-mode -1)
	(scroll-bar-mode -1)
	(tooltip-mode -1))

;;; Scroll setup
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1))) ;; one line at a time
(setq mouse-wheel-progressive-speed nil) ;; don't accelerate scrolling
(setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse

(setq scroll-conservatively 200) ;; 스크롤 도중에 센터로 커서 이동하지 않도록
(setq scroll-margin 3) ;; 스크롤시 남기는 여백

;;; Font
;; http://ppss.kr/archives/66633
(when (and window-system (eq system-type 'darwin))
	(set-face-attribute 'default nil :family "D2Coding" :height 150 :weight 'ultra-light))
(when (and window-system (eq system-type 'windows-nt))
	(set-face-attribute 'default nil :family "D2Coding" :height 120 :weight 'ultra-light))

;;; Paste setup
(defun copy-from-osx ()
	"Copy from osx."
	(shell-command-to-string "pbpaste"))

(defun paste-to-osx (text &optional push)
	(let ((process-connection-type nil))
		(let ((proc (start-process "pbcopy" "*Messages*" "pbcopy")))
			(process-send-string proc text)
			(process-send-eof proc))))

(unless window-system
	(setq interprogram-cut-function 'paste-to-osx)
	(setq interprogram-paste-function 'copy-from-osx))

;;; shell
(when (eq system-type 'windows-nt)
	(let* ((combine-path (lambda (dir dir-or-file)
												 (concat (file-name-as-directory dir) dir-or-file)))
				 (base-dir "C:/git-sdk-64")
				 (mingw64-bin-dir (funcall combine-path base-dir "mingw64/bin"))
				 (msys2-bin-dir (funcall combine-path base-dir "usr/bin"))
				 (bash-path (funcall combine-path msys2-bin-dir "bash.exe")))
		(add-to-list 'exec-path msys2-bin-dir)
		(add-to-list 'exec-path mingw64-bin-dir)
		(setq explicit-shell-file-name bash-path)
		(setq shell-file-name bash-path)
		(setenv "SHELL" bash-path)
		(setq explicit-bash.exe-args '("--noediting" "--login" "-i"))
		(setenv "PATH" (concat mingw64-bin-dir path-separator
													 (concat msys2-bin-dir path-separator
																	 (getenv "PATH"))))))

;; support option
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Code Indent
(defun indent-buffer()
	(interactive)
	(indent-region (point-min) (point-max)))

;; indent-buffer
(global-set-key (kbd "<f12>") 'indent-buffer)

(global-set-key (kbd "<f5>")
		(lambda () (interactive) (find-file org-default-notes-file)))


;;; Helper function
;; ----------------------------------------------------------------
(defun indent-buffer ()
			(interactive)
			(save-excursion
	(indent-region (point-min) (point-max) nil))
		(global-set-key [f12] 'indent-buffer))

;; http://emacsredux.com/blog/2013/04/02/move-current-line-up-or-down/
(defun move-line-up ()
	"Move up the current line."
	(interactive)
	(transpose-lines 1)
	(forward-line -2)
	(indent-according-to-mode))

(defun move-line-down ()
	"Move down the current line."
	(interactive)
	(forward-line 1)
	(transpose-lines 1)
	(forward-line -1)
	(indent-according-to-mode))

(global-set-key [(control shift up)]  'move-line-up)
(global-set-key [(control shift down)]  'move-line-down)

;;; 라인 복사 (https://www.emacswiki.org/emacs/CopyingWholeLines)
(defun copy-line (arg)
		"Copy lines (as many as prefix argument) in the kill ring.
			Ease of use features:
			- Move to start of next line.
			- Appends the copy on sequential calls.
			- Use newline as last char even on the last line of the buffer.
			- If region is active, copy its lines."
		(interactive "p")
		(let ((beg (line-beginning-position))
		(end (line-end-position arg)))
			(when mark-active
	(if (> (point) (mark))
			(setq beg (save-excursion (goto-char (mark)) (line-beginning-position)))
		(setq end (save-excursion (goto-char (mark)) (line-end-position)))))
			(if (eq last-command 'copy-line)
		(kill-append (buffer-substring beg end) (< end beg))
	(kill-ring-save beg end)))
		(kill-append "\n" nil)
		(beginning-of-line (or (and arg (1+ arg)) 2))
		(if (and arg (not (= 1 arg))) (message "%d lines copied" arg)))

;; optional key binding
(global-set-key "\C-c\C-k" 'copy-line)
#+END_SRC
* packages
#+BEGIN_SRC emacs-lisp
(use-package use-package-ensure-system-package
	:ensure t)

(use-package use-package-chords
	:ensure t
	:config (key-chord-mode 1))

(eval-when-compile
	(require 'use-package))

(use-package diminish
	:ensure t)

(use-package whitespace-cleanup-mode
	:ensure t
	:diminish whitespace-cleanup-mode
	:delight '(:eval "")
	:init
	(setq whitespace-cleanup-mode-only-if-initially-clean nil)
	(add-hook 'prog-mode-hook 'whitespace-cleanup-mode)
	(add-hook 'org-mode-hook 'whitespace-cleanup-mode))

(use-package rg
	:ensure t)

;;;; Emacs extend
(use-package which-key
	:ensure t
	:diminish which-key-mode
	:init
	(setq which-key-idle-delay 2)
	(setq which-key-max-description-length 40)
	(setq which-key-max-display-columns nil)
	(which-key-setup-side-window-bottom)
	(which-key-mode))

(use-package dashboard
	:ensure t
	:config
	(dashboard-setup-startup-hook)
	(setq dashboard-items '((recents  . 20)
				(bookmarks . 10)
				(projects . 10)))
 ;; (setq dashboard-startup-banner "~/dulley.gif")
	(setq dashboard-startup-banner nil)
	(setq dashboard-banner-logo-title "dashboard unfor9otten"))

(use-package helpful
	:ensure t
	:bind
	("C-h f" . helpful-function)
	("C-h F" . helpful-command)
	("C-h v" . helpful-variable))

(use-package exec-path-from-shell
	:ensure t
	:init
	(when (memq window-system '(mac ns))
		(exec-path-from-shell-initialize)))

;;;; Themes
(use-package atom-one-dark-theme
	:ensure t
	:init
	(load-theme 'atom-one-dark t))

(use-package paren
	:init
	(show-paren-mode 1)
	(setq show-paren-delay 0))

(use-package hl-line
	:init
	(global-hl-line-mode +1))

(use-package highlight-thing
	:ensure t
	:diminish highlight-thing-mode
	:init
	(setq highlight-thing-case-sensitive-p t)
	(setq highlight-thing-limit-to-defun t)
	(add-hook 'prog-mode-hook 'highlight-thing-mode))

(use-package rainbow-mode
	:ensure t)

(use-package rainbow-delimiters
	:ensure t
	:init
	(add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode))

(use-package indent-guide
	:ensure t
	:diminish indent-guide-mode
	:init
	(setq indent-guide-char "|")
	(indent-guide-global-mode))

;;;; Window
(use-package eyebrowse
	:ensure t
	:init
	(setq eyebrowse-keymap-prefix (kbd "C-j <SPC>"))
	(eyebrowse-mode t)
	:bind
	(:map eyebrowse-mode-map
	("C-j ;" . eyebrowse-last-window-config)
	("C-j 0" . eyebrowse-close-window-config)
	("C-j 1" . eyebrowse-switch-to-window-config-1)
	("C-j 2" . eyebrowse-switch-to-window-config-2)
	("C-j 3" . eyebrowse-switch-to-window-config-3)))

(use-package ace-window
	:ensure t
	:config
	(setq aw-keys '(?1 ?2 ?3 ?4 ?5))
	:bind ("C-x o" . ace-window))

(use-package writeroom-mode
	:diminish writeroom-mode
	:ensure t
	:init
	:config)

;; windmove
(windmove-default-keybindings)
;; Make windmove work in org-mode:
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)

;;;; swiper and ivy
(use-package swiper
	:ensure t
	:diminish ivy-mode
	:init
	(ivy-mode 1)
	(setq ivy-use-virtual-buffers nil)
	;; number of result lines to display
	(setq ivy-height 12)
	;; does not count candidates
	(setq ivy-count-format "")
	(setq ivy-switch-buffer-faces-alist
	'((emacs-lisp-mode . outline-1)
		(dired-mode . outline-2)
		(js2-mode . outline-4)
		(clojure-mode . outline-5)
		(org-mode . outline-3)))
	:bind
	(("M-x". counsel-M-x)
	 ("C-x C-f". counsel-find-file)
	 ("C-c r". counsel-recentf)
	 ("C-c g". counsel-projectile-rg)
	 ("C-c e". ivy-switch-buffer)
	 ("C-c 4 e". ivy-switch-buffer-other-window)
	 ("C-c o". counsel-imenu)
	 ("C-c y" . counsel-yank-pop)
	 ("C-x r l" . counsel-bookmark)
	 :map ivy-mode-map
	 ("S-SPC" . toggle-input-method)
	 :map ivy-minibuffer-map
	 ("C-j" . ivy-alt-done)))

;; Avy
(use-package avy
	:ensure t
	:chords
	("fdw" . avy-goto-word-1)
	("fdd" . avy-goto-char-2)
	("fdl" . avy-goto-line))

;;;; Move&History
(use-package git-timemachine
	:ensure t)

(use-package undo-tree
	:ensure t
	:diminish undo-tree-mode
	:init
	(global-undo-tree-mode)
	:bind
	("C-z" . undo)
	("C-S-z" . undo-tree-redo))

(use-package goto-last-change
	:ensure t)

(use-package dumb-jump
	:ensure t
 ;; :ensure-system-package rg
	:config
	(setq dumb-jump-selector 'ivy)
	(setq dumb-jump-force-searcher 'rg))

(use-package iedit
	:ensure t)

(use-package expand-region
	:ensure t
	:bind
	("C-c C-v" . er/expand-region)
	("C-c v" . er/expand-region))

(use-package evil
	:ensure t
	:config
	(evil-mode t)
	(defalias 'evil-insert-state 'evil-emacs-state) ; http://stackoverflow.com/a/27794225/2932728
	;; (setq evil-default-state 'emacs) ; emacs or evil
	:bind
	;; https://bitbucket.org/bastibe/.emacs.d/src/12d08ec90a6445787b028fa8640844a67182e96d/init.el?at=master&fileviewer=file-view-default
	(:map evil-emacs-state-map)
	([escape] . evil-normal-state)
	:config
	)


(use-package evil-escape
	:ensure t
	:init
	(add-hook 'evil-mode-hook #'evil-escape-mode)
	:config
	(setq-default evil-escape-delay 0.2))

(use-package paredit
	:ensure t
	:config
	(define-key paredit-mode-map (kbd "C-j") nil)
	(add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
	(add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
	(add-hook 'ielm-mode-hook             #'enable-paredit-mode)
	(add-hook 'lisp-mode-hook             #'enable-paredit-mode)
	(add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
	:bind
	(:map paredit-mode-map
	("C-M-f" . nil)))

(use-package parinfer
	:ensure t
	:bind
	(("C-," . parinfer-toggle-mode))
	:init
	(progn
		(setq parinfer-extensions
		'(defaults       ; should be included.
			 pretty-parens  ; different paren styles for different modes.
			 ;;lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
			 paredit        ; Introduce some paredit commands.
			 smart-yank))   ; Yank behavior depend on mode.
		(add-hook 'clojure-mode-hook #'parinfer-mode)
		(add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
		(add-hook 'common-lisp-mode-hook #'parinfer-mode)
		(add-hook 'scheme-mode-hook #'parinfer-mode)
		(add-hook 'lisp-mode-hook #'parinfer-mode)))

(use-package multiple-cursors
	:ensure t)

;; File & Buffer
(use-package recentf
 :init
	(setq recentf-max-saved-items 300
	recentf-exclude '("/auto-install/" ".recentf" "/repos/" "/elpa/"
				"\\.mime-example" "\\.ido.last" "COMMIT_EDITMSG"
				".gz" "~$" "/tmp/" "/ssh:" "/sudo:" "/scp:"))
	(recentf-mode t))

(use-package ibuffer
	:ensure t
	:init
	(global-set-key (kbd "C-x C-b") 'ibuffer)
	(autoload 'ibuffer "ibuffer" "List buffers." t))

(use-package delight
	:ensure t)

(use-package projectile
	:ensure t
	:delight '(:eval (concat " [" (projectile-project-name) "]"))
	:init
	(projectile-mode)
	(when (and window-system (eq system-type 'windows-nt))
		(setq projectile-git-submodule-command nil))
	:config
	(setq projectile-completion-system 'ivy)
	(setq projectile-enable-caching t)
	;;; 아무데서나 프로젝타일을 사용하게하려면 주석해제
	;; (setq projectile-require-project-root nil)
	(setq projectile-indexing-method 'alien)
	(setq projectile-globally-ignored-directories
	(append '(".DS_Store" ".git" ".svn" "out" "repl" "target" "dist" "lib" "node_modules" "libs" "deploy")
		projectile-globally-ignored-directories))
	(setq projectile-globally-ignored-files
	(append '(".#*" ".DS_Store" "*.tar.gz" "*.tgz" "*.zip" "*.png" "*.jpg" "*.gif")
		projectile-globally-ignored-files))
	(setq grep-find-ignored-directories (append '("dist" "deploy" "node_modules") grep-find-ignored-directories))
	:bind
	("C-c p f" . projectile-find-file)
	("C-c p 4 f" . projectile-find-file-other-window)
	("C-c p b" . projectile-switch-to-buffer)
	("C-c p 4 b" . projectile-switch-to-buffer-other-window)
	("C-c p D" . projectile-dired)
	("C-c p d" . projectile-find-dir)
	("C-c p j" . projectile-find-tag)
	("C-c p r" . projectile-replace)
	("C-c p o" . projectile-multi-occur)
	("C-c p s s" . counsel-projectile-ag)
	("C-c g" . counsel-projectile-rg)
	("C-c p I" . projectile-ibuffer)
	("C-c p p" . projectile-switch-project))

(use-package ibuffer-projectile
	:ensure t
	:init
	(add-hook 'ibuffer-hook
		(lambda ()
			(ibuffer-projectile-set-filter-groups)
			(unless (eq ibuffer-sorting-mode 'alphabetic)
	(ibuffer-do-sort-by-alphabetic)))))

(use-package counsel
	:ensure t)

(use-package counsel-projectile
	:ensure t
	:init
	(counsel-projectile-mode))

(use-package wgrep
	:ensure t)

;;; Coding
(use-package company
	:ensure t
	:diminish company-mode
	:init
	(add-hook 'prog-mode-hook 'company-mode)
	:config
	(setq company-tooltip-align-annotations t)
	(setq company-idle-delay 0.1)
	(setq company-show-numbers t)
	(setq company-dabbrev-downcase nil)
	(setq company-minimum-prefix-length 2)
	(define-key company-active-map (kbd "M-n") nil)
	(define-key company-active-map (kbd "M-p") nil)
	(define-key company-active-map (kbd "C-j") #'company-select-next)
	(define-key company-active-map (kbd "C-k") #'company-select-previous))

;;;; Emacs-lisp
(use-package suggest
	:ensure t)


;;; Swift
(use-package swift-mode
	:ensure t)

;; Sourcekittendaemon이 설치 되어 있어야함
;; https://github.com/terhechte/SourceKittenDaemon
;;(use-package company-sourcekit
;;  :ensure t
;;  :init
;;  (add-to-list 'company-backends 'company-sourcekit))

;;; markdown mode
(use-package markdown-mode
	:ensure t
	:commands (markdown-mode gfm-mode)
	:mode (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode))
	:init (setq markdown-command "multimarkdown"))


;;; Utilities
(use-package google-translate
	:ensure t
	:init
	(require 'google-translate)
	(require 'google-translate-smooth-ui)
	(setq google-translate-translation-directions-alist
	'(("en" . "ko") ("ko" . "en")))
	(setq google-translate-pop-up-buffer-set-focus t)
	(setq google-translate-output-destination 'echo-area)
	(setq max-mini-window-height 0.5)
	:bind
	("C-c t" . google-translate-smooth-translate))

(use-package beacon
	:ensure t
	:diminish beacon-mode
	:config
	(beacon-mode 1))

(use-package multi-term
	:ensure t
	:init
	(when (and window-system (eq system-type 'windows-nt))
		(setq multi-term-program "bash"))
	:bind
	("C-c i" . multi-term))

;; terminal(멀티텀포함)에서 C-j를 글로벌 맵이용하도록 훅
(add-hook 'term-mode-hook
		(lambda ()
			(define-key term-raw-map (kbd "C-j")
				 (lookup-key (current-global-map) (kbd "C-j")))))

(use-package magit
	:commands magit-get-top-dir
	:diminish auto-revert-mode
	:ensure t
	:init
	;; magit 오토 리버트시 버퍼의 브랜치명까지 갱신하도록
	(setq auto-revert-check-vc-info t)
	(with-eval-after-load 'info
		(info-initialize)
		(add-to-list 'Info-directory-list
		 "~/.emacs.d/site-lisp/magit/Documentation/"))
	;;; 이맥스가 기본적으로 제공하는 Git 백엔드를 켜두면 매우 느려진다. magit만 쓴다.
	(setq vc-handled-backends nil)
	:config
	(setq vc-follow-symlinks t)
	(setq find-file-visit-truename t)
	(setq magit-refresh-status-buffer 'switch-to-buffer)
	(setq magit-rewrite-inclusive 'ask)
	(setq magit-save-some-buffers t)
	(setq magit-set-upstream-on-push 'askifnotset)
	:bind
	("C-c m" . magit-status))
(use-package evil-magit
	:ensure t)

(use-package wttrin
	:ensure t
	:init
	(setq wttrin-default-accept-language '("Accept-Language" . "ko-KR")))

(use-package linum-relative
	:ensure t
	:init
	(progn
		(defun my-linum-formatter (line-number)
			(propertize (format linum-relative-format line-number) 'face 'linum))
		(setq linum-format 'my-linum-formatter)
		;; turn on linum-mode, and make it relative

		;; emacs mode never shows linum
		;; (add-hook 'evil-emacs-state-entry-hook (lambda ()
		;;							 (linum-mode -1)))
		;; (add-hook 'evil-emacs-state-exit-hook (lambda ()
		;;							(linum-mode 1)))

		;; in normal mode, show relative numbering
		(add-hook 'evil-normal-state-entry-hook (lambda ()
								(setq linum-format 'linum-relative)))
		;; turn off linum-mode, and make it normal again
		(add-hook 'evil-normal-state-exit-hook (lambda ()
							 (setq linum-format 'my-linum-formatter)))

		;; copy linum face so it doesn't look weird
		(custom-set-faces
		 '(linum-relative-current-face
			 ((t (:inherit linum :weight bold :reverse t))))))

	:config (setq linum-relative-current-symbol ">>"))
(use-package restclient
	:ensure t)

;;; Clojure setup
(use-package cider
	:ensure t
	:init
	(add-hook 'cider-repl-mode-hook #'company-mode)
	(add-hook 'cider-mode-hook #'company-mode)
	:config
	;; comment-eval 자동 개행
	(setq cider-comment-prefix "\n;; => "))

(use-package clojure-mode
	:ensure t)

;;; yasnippet
(use-package yasnippet
	:ensure t
	:diminish yas-minor-mode
	:init
	(add-hook 'prog-mode-hook #'yas-minor-mode)
	(add-hook 'org-mode-hook #'yas-minor-mode)
	:config
	(setq yas-snippet-dirs '("~/dotfiles/yasnippets"))
	(yas-reload-all)

	;;yasnippet 하고 tab 충돌 해결
	(defun yas/org-very-safe-expand ()
		(let ((yas-fallback-behavior 'return-nil)) (yas-expand)))

	(add-hook 'org-mode-hook
			(lambda ()
				(make-variable-buffer-local 'yas-expand-from-trigger-key)
				(setq yas-expand-from-trigger-key [tab])
				(add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
				(define-key yas/keymap [tab] 'yas-next-field))))

(use-package iedit
	:ensure t)

(use-package expand-region
	:ensure t
	:bind
	("C-c C-v" . er/expand-region)
	("C-c v" . er/expand-region))


;;; neotree
;; c.f -> https://www.emacswiki.org/emacs/NeoTree
(defun neotree-project-dir ()
		"Open NeoTree using the git root."
		(interactive)
		(let ((project-dir (projectile-project-root))
		(file-name (buffer-file-name)))
			(neotree-toggle)
			(if project-dir
		(if (neo-global--window-exists-p)
				(progn
		(neotree-dir project-dir)
		(neotree-find file-name)))
	(message "Could not find git project root."))))

(use-package neotree
	:ensure t
	:config
	(setq neo-smart-open t)
	;; C-c p p
	(setq projectile-switch-project-action 'neotree-projectile-action)
;;  (global-set-key [f4] 'neotree-toggle)
	(global-set-key [f4] 'neotree-project-dir))

(use-package adoc-mode
	:ensure t)

(use-package gradle-mode
	:ensure t)
(use-package groovy-mode
	:ensure t)

(use-package imenu-list
	:ensure t)
(use-package rjsx-mode
	:ensure t)
(use-package emmet-mode
	:ensure t)
(use-package vimrc-mode
	:ensure t)
(use-package htmlize
	:ensure t)

(use-package plantuml-mode
	:ensure t
	:init
	(setq plantuml-default-exec-mode 'jar)
	(setq plantuml-jar-path "~/.emacs.d/bin/plantuml/plantuml.jar"))

(use-package fill-column-indicator
	:ensure t)

(use-package ranger
	:ensure t
	:init
	(ranger-override-dired-mode t)
	(global-set-key (kbd "<f6>") 'ranger))
#+END_SRC
* org
#+BEGIN_SRC emacs-lisp
;;; org file setting
(eval-after-load "artist"
	'(define-key artist-mode-map [(down-mouse-3)] 'artist-mouse-choose-operation))

;; 소스코드 자동완성 하위 호환성 : https://orgmode.org/Changes.html -> new keybind : C-c ,
;; (require 'org-tempo)

;; Set Org-mode Image width-max
;; Always resize inline image to 300 pixels
(setq org-image-actual-width '(300))

;; org 설치파일에서 *.elc 삭제 --> 윈도우가 느려지며, ditaa등을 사용하는데 오류 발생
(use-package org-bullets
	:ensure t
	:init
	(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

;;; org
(use-package ob-swift
	:ensure t)

(use-package ob-typescript
	:ensure t)

(use-package ob-clojurescript
	:ensure t)

(use-package ob-go
	:ensure t)

(use-package ox-gfm
	:ensure t)

(use-package ox-asciidoc
	:ensure t)

(use-package org-tree-slide
	:ensure t)

(use-package ob-restclient
	:ensure t)

(use-package ob-blockdiag
	:ensure t)

(use-package org
	:ensure t
	:bind
	(("\C-cl" . org-store-link)
	 ("\C-ca" . org-agenda)
	 ("\C-cc" . org-capture)
	 ("\C-cb" . org-iswitchb))
	:init
	(add-to-list 'auto-mode-alist '("\\.org$" . org-mode))
	(setq org-agenda-files (file-expand-wildcards "~/orgfiles/agenda/*.org"))
	(setq org-default-notes-file "~/orgfiles/agenda/index.org")
	(setq org-mobile-inbox-for-pull "~/orgfiles/agenda/index.org")

	(setq org-refile-targets '((org-agenda-files :level . 1)))
	(setq org-todo-keywords '((sequence "TODO" "INPROGRESS" "WAITING" "|" "DONE" "CANCELED")))
	(setq org-agenda-custom-commands
				'(("o" "Office View"
					 ((agenda "")
						(tags-todo "@office")
						(todo "WAITING")))
					("sa" "Agenda search" search ""
					 ((org-agenda-files (file-expand-wildcards "~/orgfiles/agenda/*.org"))))
					("sd" "Document search" search ""
					 ((org-agenda-files (file-expand-wildcards "~/orgfiles/note/*.org"))))))

	(setq org-babel-clojure-backend 'cider)
	(setq org-agenda-restore-windows-after-quit t)

	(setq org-confirm-babel-evaluate nil)
	(setq org-src-fontify-natively t)
	(setq org-src-tab-acts-natively t)
	(setq org-src-strip-leading-and-trailing-blank-lines t)
	(setq org-log-done t)
	(setq org-edit-src-content-indentation 0)
	(setq org-adapt-indentation nil)

	;;
	(setq org-export-allow-BIND t)

	(eval-after-load "org"
		'(require 'ox-gfm nil t))
	(setq org-plantuml-jar-path
				(expand-file-name "~/.emacs.d/bin/plantuml/plantuml.jar"))

	(setq org-ditaa-jar-path
				(expand-file-name "~/.emacs.d/bin/ditaa/ditaa0_9.jar"))

	;; Add Org-babel
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '((python . t)
		 (ditaa . t)
		 (java . t)
		 (go . t)
		 (shell . t)
		 (js . t)
		 (emacs-lisp . t)
		 (plantuml . t)
		 (blockdiag . t)
		 (clojure . t)
		 (clojurescript . t)))

	;; 실행이후, 이미지 보이기
	(add-hook 'org-babel-after-execute-hook
						(lambda ()
							(when org-inline-image-overlays
								(org-redisplay-inline-images))))

	;;  (add-hook 'org-export-before-processing-hook (lambda (backend) (load-theme 'github t)))
	;;  (add-hook 'org-export-stack-mode-hook (lambda (backend) (load-theme 'spacemacs-dark t)))
	;; org에서 linewrap 되게
	(add-hook 'org-mode-hook (lambda () (setq truncate-lines nil)))
	:config
	(define-key org-mode-map (kbd "C-j") nil)
	(define-key org-mode-map (kbd "<return>") 'org-return-indent))

;; (add-to-list 'org-structure-template-alist
;;				 '("u" . "src plantuml :file ?.png :cmdline -charset UTF-8"))
;; (add-to-list 'org-structure-template-alist
;;				 '("u" . "src shell :results value drawer"))
#+END_SRC
* go
#+BEGIN_SRC emacs-lisp
;;; golang Install
;;;;;;;;;;;;;;;;;;;;;
(when (memq window-system '(mac ns))
	(exec-path-from-shell-initialize)
	(exec-path-from-shell-copy-envs
	 '("PATH" "GOPATH")))

(add-to-list 'exec-path "~/go/bin")
(eval-after-load 'go-mode
	'(progn
		 (add-hook 'before-save-hook 'gofmt-before-save)
		 (when (executable-find "goimports")
			 (add-hook 'go-mode-hook
		 (lambda ()
			 (setq gofmt-command "goimports"))))))

;; http://tleyden.github.io/blog/2014/05/22/configure-emacs-as-a-go-editor-from-scratch/
(defun my-go-mode-hook ()
	;; Call Gofmt before saving
	(add-hook 'before-save-hook 'gofmt-before-save)
	; Customize compile command to run go build
	(if (not (string-match "go" compile-command))
			(set (make-local-variable 'compile-command)
		 "go build -v && go test -v && go vet"))
	(define-key global-map "\M-." 'godef-jump)
	(local-set-key (kbd "M-.") 'godef-jump)
	(local-set-key (kbd "M-*") 'pop-tag-mark)
	(local-set-key (kbd "C-c C-c") 'compile)
	(setq tab-width 2)
	(setq indent-tabs-mode t)
	(set (make-local-variable 'company-backends) '(company-go)))

(use-package go-mode
	:ensure t
	;; :ensure-system-package
	;; ((godef . "go get github.com/rogpeppe/godef")
	;;  (gstool . "go get golang.org/x/tools/cmd/..."))
	:config
	(add-hook 'go-mode-hook 'my-go-mode-hook))

(use-package company-go
	:ensure t)
;; :ensure-system-package (gscode . "go get -u github.com/nsf/gocode"))

;; https://github.com/brantou/emacs-go-tag
;; go get github.com/fatih/gomodifytags
(use-package go-tag
	:ensure t)

(use-package go-direx
	:ensure t
	:config
	(define-key go-mode-map (kbd "C-c C-j") 'go-direx-pop-to-buffer))
#+END_SRC
* web
#+BEGIN_SRC emacs-lisp
;; https://github.com/prettier/prettier-emacs
;; brew install prettier
(use-package prettier-js
	:ensure t
	:init
	(setq prettier-js-args '(
													 "--trailing-comma" "all"
													 "--single-quote" "true"
													 "--bracket-spacing" "false")))



(use-package emmet-mode
	:ensure t)

(use-package add-node-modules-path
	:ensure t
	:init)
;;(add-hook 'flycheck-mode-hook 'add-node-modules-path)

(use-package rjsx-mode
	:ensure t
	:init
	(add-hook 'rjsx-mode 'emmet-mode)
	(add-hook 'web-mode-hook #'prettier-js-mode))

(use-package react-snippets
	:ensure t)
(setq web-mode-content-types-alist
			'(("jsx" . "\\.js[x]?\\'")))


;;;; javascript
(setq js-indent-level 2)

(defun eslint-fix ()
	"Format the current file with ESLint."
	(interactive)
	(let ((eslint (or (shiren/use-eslint-from-node-modules) (executable-find "eslint"))))
		(if (file-executable-p eslint)
				(progn (call-process eslint nil "*ESLint Errors*" nil "--rule" "no-debugger:0" "--fix" buffer-file-name)
							 (revert-buffer t t t))
			(message "ESLint not found."))))

(use-package js2-refactor
	:ensure t)
(use-package js2-mode
	:ensure t
	:init
	(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
	(add-to-list 'auto-mode-alist '("\\.es6\\'" . js2-mode))
	;; (add-hook 'js2-mode-hook #'js2-refactor-mode)
	(add-hook 'js2-mode-hook
						'(lambda ()
							 (js2-imenu-extras-mode)))
	:config
	(define-key js2-mode-map (kbd "M-.") nil)
	(define-key js2-mode-map (kbd "C-c C-j") nil)
	(setq js2-include-node-externs t)
	(setq js2-pretty-multiline-declarations nil)
	(add-hook 'js2-mode-hook 'prettier-js-mode)
	(add-hook 'js2-mode-hook (lambda ()
														 ;;(add-hook 'after-save-hook 'eslint-fix nil t)
														 (setq tab-width 2)
														 (setq-default js2-basic-offset 2)
														 (js2-imenu-extras-mode)))
	(setq-default js2-basic-offset 2
								js1-bounce-indent-p nil)
	(setq-default js2-mode-show-parse-errors nil
								js2-mode-show-strict-warnings nil))

;;;; Web
(use-package web-mode
	:ensure t
	:init
	(defun my-web-mode-hook ()
		"Hooks for Web mode."
		(setq web-mode-markup-indent-offset 2)
		(setq web-mode-code-indent-offset 2)
		(setq web-mode-css-indent-offset 2))

	(add-hook 'web-mode-hook  'my-web-mode-hook)
	(eval-after-load 'web-mode
		'(progn
			 (add-hook 'web-mode-hook #'add-node-modules-path)
			 (add-hook 'web-mode-hook  'emmet-mode)
			 (add-hook 'web-mode-hook #'prettier-js-mode)
			 ))
	(setq-default tab-width 2)
	(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.js?\\'" . web-mode))
	(add-to-list 'auto-mode-alist '("\\.css\\'" . web-mode)))


(use-package tern
	:disabled
	:ensure t
	:ensure-system-package (tern . "npm i -g tern")
	:diminish tern-mode
	:init
	(autoload 'tern-mode' "tern.el" nil t)
	(add-hook 'js2-mode-hook (lambda () (tern-mode t)))
	(add-hook 'rjsx-mode-hook (lambda () (tern-mode t)))
	:config
	(define-key tern-mode-keymap (kbd "C-c C-r") nil)
	;; (define-key tern-mode-keymap (kbd "M-.") nil)
	;; (define-key tern-mode-keymap (kbd "M-,") nil)
	(setq tern-command '("tern" "--no-port-file")))

(use-package company-tern
	:disabled
	:ensure t
	:init
	(add-to-list 'company-backends 'company-tern))
#+END_SRC
